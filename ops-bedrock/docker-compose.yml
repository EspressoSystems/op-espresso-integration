version: '3.4'

# This Compose file is expected to be used with the devnet-up.sh script.
# The volumes below mount the configs generated by the script into each
# service.

volumes:
  l1_data:
  l2_data:
  op_log:
  blockscout_db:
  blockscout_logs:
  blockscout_redis:

services:
  l1:
    build:
      context: .
      dockerfile: Dockerfile.l1
    ports:
      - "8545:8545"
      - "8546:8546"
      - "7060:6060"
    volumes:
      - "l1_data:/db"
      - "${DEVNET_DIR}/genesis-l1.json:/genesis.json"
      - "${PWD}/test-jwt-secret.txt:/config/test-jwt-secret.txt"

  l2:
    build:
      context: .
      dockerfile: Dockerfile.l2
    ports:
      - "9545:8545"
      - "8060:6060"
    volumes:
      - "l2_data:/db"
      - "${DEVNET_DIR}/genesis-l2.json:/genesis.json"
      - "${PWD}/test-jwt-secret.txt:/config/test-jwt-secret.txt"
    entrypoint:
      # pass the L2 specific flags by overriding the entry-point and adding extra arguments
      - "/bin/sh"
      - "/entrypoint.sh"
      - "--authrpc.jwtsecret=/config/test-jwt-secret.txt"

  op-node:
    depends_on:
      - l1
      - l2
    build:
      context: ../
      dockerfile: ./op-node/Dockerfile
    command: >
      op-node
      --l1=ws://l1:8546
      --l2=http://l2:8551
      --l2.jwt-secret=/config/test-jwt-secret.txt
      --sequencer.enabled
      --sequencer.l1-confs=0
      --verifier.l1-confs=0
      --p2p.sequencer.key=8b3a350cf5c34c9194ca85829a2df0ec3153be0318b5e2d3348e872092edffba
      --rollup.config=/rollup.json
      --rpc.addr=0.0.0.0
      --rpc.port=8545
      --p2p.listen.ip=0.0.0.0
      --p2p.listen.tcp=9003
      --p2p.listen.udp=9003
      --p2p.scoring.peers=light
      --p2p.ban.peers=true
      --snapshotlog.file=/op_log/snapshot.log
      --p2p.priv.path=/config/p2p-node-key.txt
      --metrics.enabled
      --metrics.addr=0.0.0.0
      --metrics.port=7300
      --pprof.enabled
      --rpc.enable-admin
    ports:
      - "7545:8545"
      - "9003:9003"
      - "7300:7300"
      - "6060:6060"
    environment:
      - OP_NODE_ESPRESSO_URL=http://sequencer0:8080
    volumes:
      - "${PWD}/p2p-sequencer-key.txt:/config/p2p-sequencer-key.txt"
      - "${PWD}/p2p-node-key.txt:/config/p2p-node-key.txt"
      - "${PWD}/test-jwt-secret.txt:/config/test-jwt-secret.txt"
      - "${DEVNET_DIR}/rollup.json:/rollup.json"
      - op_log:/op_log

  op-proposer:
    depends_on:
      - l1
      - l2
      - op-node
    build:
      context: ../
      dockerfile: ./op-proposer/Dockerfile
    ports:
      - "6062:6060"
      - "7302:7300"
    environment:
      OP_PROPOSER_L1_ETH_RPC: http://l1:8545
      OP_PROPOSER_ROLLUP_RPC: http://op-node:8545
      OP_PROPOSER_POLL_INTERVAL: 1s
      OP_PROPOSER_NUM_CONFIRMATIONS: 1
      OP_PROPOSER_MNEMONIC: test test test test test test test test test test test junk
      OP_PROPOSER_L2_OUTPUT_HD_PATH: "m/44'/60'/0'/0/1"
      OP_PROPOSER_L2OO_ADDRESS: "${L2OO_ADDRESS}"
      OP_PROPOSER_PPROF_ENABLED: "true"
      OP_PROPOSER_METRICS_ENABLED: "true"
      OP_PROPOSER_ALLOW_NON_FINALIZED: "true"

  op-batcher:
    depends_on:
      - l1
      - l2
      - op-node
    build:
      context: ../
      dockerfile: ./op-batcher/Dockerfile
    ports:
      - "6061:6060"
      - "7301:7300"
      - "6545:8545"
    environment:
      OP_BATCHER_L1_ETH_RPC: http://l1:8545
      OP_BATCHER_L2_ETH_RPC: http://l2:8545
      OP_BATCHER_ROLLUP_RPC: http://op-node:8545
      OP_BATCHER_MAX_CHANNEL_DURATION: 1
      OP_BATCHER_SUB_SAFETY_MARGIN: 4 # SWS is 15, ChannelTimeout is 40
      OP_BATCHER_POLL_INTERVAL: 1s
      OP_BATCHER_NUM_CONFIRMATIONS: 1
      OP_BATCHER_MNEMONIC: test test test test test test test test test test test junk
      OP_BATCHER_SEQUENCER_HD_PATH: "m/44'/60'/0'/0/2"
      OP_BATCHER_PPROF_ENABLED: "true"
      OP_BATCHER_METRICS_ENABLED: "true"
      OP_BATCHER_RPC_ENABLE_ADMIN: "true"

  artifact-server:
    depends_on:
      - l1
    image: nginx:1.25-alpine
    ports:
      - "8080:80"
    volumes:
      - "${DEVNET_DIR}/:/usr/share/nginx/html/:ro"
    security_opt:
      - "no-new-privileges:true"

  stateviz:
    build:
      context: ../
      dockerfile: ./ops-bedrock/Dockerfile.stateviz
    command:
      - stateviz
      - -addr=0.0.0.0:8080
      - -snapshot=/op_log/snapshot.log
      - -refresh=10s
    ports:
      - "9090:8080"
    volumes:
      - op_log:/op_log:ro

  op-geth-proxy:
    build:
      context: ../
      dockerfile: ./op-geth-proxy/Dockerfile
    ports:
      - "9090:9090"
    environment:
      - OP_GETH_PROXY_GETH_ADDR
      - OP_GETH_PROXY_LISTEN_ADDR=0.0.0.0:9090
      - OP_GETH_PROXY_SEQ_ADDR
      - OP_GETH_PROXY_VM_ID
    extra_hosts:
      - "host.docker.internal:host-gateway"

  orchestrator:
    image: ghcr.io/espressosystems/espresso-sequencer/orchestrator:main
    ports:
      - "8080"
    environment:
      - ESPRESSO_ORCHESTRATOR_PORT=8080
      - ESPRESSO_ORCHESTRATOR_NUM_NODES=2
      - ESPRESSO_ORCHESTRATOR_START_DELAY=1s
      - ESPRESSO_ORCHESTRATOR_NEXT_VIEW_TIMEOUT=10s
      - ESPRESSO_ORCHESTRATOR_MAX_PROPOSE_TIME=1s
      - RUST_LOG

  da-server:
    image: ghcr.io/espressosystems/espresso-sequencer/web-server:main
    ports:
      - "8080"
    environment:
      - ESPRESSO_WEB_SERVER_PORT=8080
      - RUST_LOG=error
    depends_on:
      orchestrator:
        condition: service_healthy

  consensus-server:
    image: ghcr.io/espressosystems/espresso-sequencer/web-server:main
    ports:
      - "8080"
    environment:
      - ESPRESSO_WEB_SERVER_PORT=8080
      - RUST_LOG=error
    depends_on:
      orchestrator:
        condition: service_healthy

  commitment-task:
    image: ghcr.io/espressosystems/espresso-sequencer/commitment-task:main
    command: commitment-task --deploy
    environment:
    - ESPRESSO_SEQUENCER_URL=http://sequencer0:8080
    - ESPRESSO_SEQUENCER_L1_PROVIDER=http://l1:8545
    - ESPRESSO_SEQUENCER_ETH_MNEMONIC
    - ESPRESSO_SEQUENCER_HOTSHOT_ACCOUNT_INDEX=1
    - ESPRESSO_SEQUENCER_L1_USE_LATEST_BLOCK_TAG
    - RUST_LOG
    depends_on:
      sequencer0:
        condition: service_healthy
      l1:
        condition: service_started

  sequencer0:
    image: ghcr.io/espressosystems/espresso-sequencer/sequencer:main
    ports:
      - "8080"
    # Run the API server (with options taken from the environment) and the optional submission API
    command: sequencer -- http -- query -- submit
    environment:
      - ESPRESSO_SEQUENCER_ORCHESTRATOR_URL=http://orchestrator:8080
      - ESPRESSO_SEQUENCER_DA_SERVER_URL=http://da-server:8080
      - ESPRESSO_SEQUENCER_CONSENSUS_SERVER_URL=http://consensus-server:8080
      - ESPRESSO_SEQUENCER_API_PORT=8080
      - ESPRESSO_SEQUENCER_STORAGE_PATH=/store/sequencer
      - ESPRESSO_SEQUENCER_L1_PROVIDER
      - ESPRESSO_SEQUENCER_L1_USE_LATEST_BLOCK_TAG
      - RUST_LOG
    depends_on:
      orchestrator:
        condition: service_healthy
    extra_hosts:
      - "host.docker.internal:host-gateway"

  sequencer1:
    image: ghcr.io/espressosystems/espresso-sequencer/sequencer:main
    ports:
      - "8080"
    command: sequencer -- http -- query
    environment:
      - ESPRESSO_SEQUENCER_ORCHESTRATOR_URL=http://orchestrator:8080
      - ESPRESSO_SEQUENCER_DA_SERVER_URL=http://da-server:8080
      - ESPRESSO_SEQUENCER_CONSENSUS_SERVER_URL=http://consensus-server:8080
      - ESPRESSO_SEQUENCER_API_PORT=8080
      - ESPRESSO_SEQUENCER_STORAGE_PATH=/store/sequencer
      - ESPRESSO_SEQUENCER_L1_PROVIDER
      - ESPRESSO_SEQUENCER_L1_USE_LATEST_BLOCK_TAG
      - RUST_LOG
    depends_on:
      orchestrator:
        condition: service_healthy
    extra_hosts:
      - 'host.docker.internal:host-gateway'

  redis_db:
    extends:
      file: ../blockscout/docker-compose/services/docker-compose-redis.yml
      service: redis_db
    volumes:
      - blockscout_redis:/data

  db:
    extends:
      file: ../blockscout/docker-compose/services/docker-compose-db.yml
      service: db
    volumes:
      - blockscout_db:/var/lib/postgresql/data

  blockscout-l2:
    depends_on:
      - db
      - smart-contract-verifier
      - redis_db
    # On ARM (M1, M2 macs) set env var
    # BLOCKSCOUT_IMAGE=ghcr.io/espressosystems/blockscout/blockscout-arm:main
    # until we find a better solution
    image: ${BLOCKSCOUT_IMAGE:-blockscout/blockscout:latest}
    pull_policy: always
    restart: always
    stop_grace_period: 5m
    container_name: 'blockscout'
    links:
      - db:database
    command: sh -c "bin/blockscout eval \"Elixir.Explorer.ReleaseTasks.create_and_migrate()\" && bin/blockscout start"
    env_file:
      -  ../blockscout/docker-compose/envs/common-blockscout.env
    environment:
        ETHEREUM_JSONRPC_VARIANT: 'geth'
        ETHEREUM_JSONRPC_HTTP_URL: http://l2:8545/
        ETHEREUM_JSONRPC_TRACE_URL: http://l2:8545/
        DATABASE_URL: postgresql://postgres:@db:5432/blockscout?ssl=false
        ECTO_USE_SSL: 'false'
        SECRET_KEY_BASE: '56NtB48ear7+wMSf0IQuWDAAazhpb31qyc7GiyspBP2vh7t5zlCsF5QDv76chXeN'
        MIX_ENV: 'prod'
    ports:
      - 4000:4000
    volumes:
      - blockscout_logs:/app/logs/

  smart-contract-verifier:
    extends:
      file: ../blockscout/docker-compose/services/docker-compose-smart-contract-verifier.yml
      service: smart-contract-verifier

  visualizer:
    extends:
      file: ../blockscout/docker-compose/services/docker-compose-visualizer.yml
      service: visualizer

  sig-provider:
    extends:
      file: ../blockscout/docker-compose/services/docker-compose-sig-provider.yml
      service: sig-provider
